#!/usr/bin/python3

import sys, json, socket, random, datetime, binascii

from Crypto.Cipher import AES

# Enter the key generated by the controller app here
key = 'xxxxxxxx-xxxx-xx';
# Name your blinds - Delete any fields not needed
blinds = ["dining","patio","bedroom","study","ella"]

# If we didn't enter the correct number of parameters, display the script usage
if len(sys.argv) != 3:
   print ("blind [name/all] [open/close/up/down/stop/halt/query/status/0-100]")
   exit(0)

# Query the hub for the token needed to generate the access token
payload = str.encode('{"msgType":"GetDeviceList","msgID":"2023465678"}')
UDPClientSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
UDPClientSocket.sendto(payload, ("238.0.0.18",32100))
# Generate the AccessToken
token = ((binascii.hexlify(AES.new(key, AES.MODE_ECB).encrypt(json.loads(format(UDPClientSocket.recvfrom(1024)[0].decode("utf-8")))["token"])).upper()).decode())

bln = sys.argv[1]
command = sys.argv[2]
blind = "9999"
operation = command
data = "targetPosition"

# Generate the msgID - Time string with extra characters
rn = str(random.randint(100,159))
t = datetime.datetime.now()
id = t.strftime("%Y")+t.strftime("%m")+t.strftime("%d")+t.strftime("%H")+t.strftime("%M")+t.strftime("%S")+rn

# Get the MAC address of the hub
payload = str.encode('{"msgType":"GetDeviceList","msgID":"2023465678"}')
UDPClientSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
UDPClientSocket.sendto(payload, ("238.0.0.18",32100))
mac = str(json.loads(format(UDPClientSocket.recvfrom(1024)[0].decode("utf-8")))["mac"])

# Generate the relevant blind number and command codes
cmds = ["close","down","open","up","stop","halt","status","query"]
ops = ["0","0","1","1","2","2","5","5"]
c = 0
for x in cmds:
   if command == x:
      operation = ops[c]
      data = "operation"
   c += 1

c = 0
for x in blinds:
   c += 1
   if bln == x:
      blind = "000" + str(c)
if bln == "all":
   blind = "0000"

# Check everything makes sense
if blind == "9999":
   print ("Unknown blind name "+bln)
   exit(0)

if blind == "0000" and operation == "5":
   print ("You must query individual blinds for status")
   exit(0)

if data != "operation":
   if command.isdigit() == True:
      pct = int(command)
      if pct < 0 or pct > 100:
         print ("Blind movement must be between 0 and 100")
         exit(0)
   else:
      print ("Blind movement must be numeric and between 0 and 100")
      exit(0)

# Generate the payload and send to send to the hub
payload = str.encode('{"msgType":"WriteDevice",\
                        "mac":"'+mac+''+blind+'",\
                        "DeviceType":"10000000",\
                        "AccessToken":"'+token+'",\
                        "msgID":"'+id+'",\
                        "data":{"'+data+'":'+operation+'}\
                      }')

UDPClientSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
UDPClientSocket.sendto(payload, ("238.0.0.18",32100))
data = json.loads(format(UDPClientSocket.recvfrom(1024)[0].decode("utf-8")))

# Print battery remaining and blind position
bat = str(int(100*float(data["data"]["batteryLevel"])/1200))
print ("Battery "+bat+"%")
print ("Blind position "+str((data["data"]["currentPosition"]))+"%")
if command == "stop" or command == "halt":
   print ("Blind movement halted")
   exit(0)
if command == "query":
   command = "status"
if command != "status":
   if command == "open" or command == "up":
      command = "0"
   if command == "close" or command == "down":
      command = "100"
   print ("New position "+command+"%")
